#include<iostream>
#include<cmath>
using namespace std;
void split_print(int** arr,int left_col,int right_col,int left_row,int right_row,int ranker)
{
   /// Target is to generate or print the matrix that is given to each process
   /// ultimately u need to map the n/sqrt(p) *  n/sqrt(p)  sub-matrix such that this sub-matrix is taken care of by each processor...
   cout<<"My left_col , right_col, left_row, left_col :"<<left_col<<" "<<right_col<<" "<<left_row<<" "<<right_row<<endl;
   cout<<"My rank is :  "<<ranker<<endl;
   for(int i=left_row;i<right_row;i++)
   {
       for(int j=left_col;j<right_col;j++)
       {
           cout<<arr[i][j]<<" ";
       }
       cout<<endl;
   }
}
int main()
{
   int n_rows,n_cols;
   cout<<"Enter no of rows and columns:"<<endl;
   cin>>n_rows>>n_cols;
   int p;
   cout<<"Enter no of processors:"<<endl;
   cin>>p;
   int** arr=new int*[n_rows];

   for(int i=0;i<n_rows;i++)
    {
        arr[i]=new int[n_cols];
        for(int j=0;j<n_cols;j++)
        {
            cin>>arr[i][j];
        }
    }
    cout<<"Enough input lets see the output:"<<endl;
    for(int i=0;i<n_rows;i++)
    {
        for(int j=0;j<n_cols;j++)
        {
            cout<<arr[i][j]<<" ";
        }
        cout<<endl;
    }

    int sqrt_value=(int)sqrt(p);
    int row_denominator=(int)(n_rows/sqrt_value);
    int col_denominator=(int)(n_cols/sqrt_value);
    int ranker=0;
    for(int i=0;i<n_rows;i=i+row_denominator)
    {
       for(int j=0;j<n_cols;j=j+col_denominator)
       {
          int left_row=(i);
          int right_row=left_row+row_denominator;
          int left_col=(j);
          int right_col=left_col+col_denominator;
           split_print(arr,left_col,right_col,left_row,right_row,ranker);
           ranker++;
       }
    }
   return 0;
}
